#!/bin/bash

set -euo pipefail

CMD_LIST=""

i=0

DESIRED_RESOURCES="configmaps,persistentvolumeclaims,pods,secrets,services,deployments, \
  statefulsets,jobs,boshdeployments, extendedjobs,extendedsecrets,extendedstatefulsets"

function usage() {
  echo "Usage: $0 [options]"
  echo "Options:"
  echo "   -n|--namespace <value>"
  echo "                  Optional: specify the namespace to monitor resources (default: CF_OPERATOR_NAMESPACE env var)"
  echo "   -bdpl|--boshdeployment"
  echo "                  Optional: get a boshdeployment and related objects"
  echo "   -ejob|--extendedjobs"
  echo "                  Optional: get a extendedjobs and related objects"
  echo "   -esec|--extendedsecrets"
  echo "                  Optional: get a extendedsecrets and related objects"
  echo "   -ests|--extendedstatefulsets"
  echo "                  Optional: get a extendedstatefulsets and related objects"
  echo "   -v|--verbose"
  echo "                  Optional: enable verbose mode(default: disable)"
  echo "   -h|--help"
  echo "                  Information about how to use this script"
  echo
}

# When verbose, print some logs
function generate_logs(){
  INFO=$1
  if [ "${VERBOSE}" -eq 1 ]; then
    echo -e "${INFO}"
  fi
}

# Get an specific resource in an specific namespace
function monitor_ns_resource(){
  RESOURCE_NAME=$1
  generate_logs "\\033[1m[INFO]\\033[0m Going to monitor ${RESOURCE_NAME} in ${NAMESPACE} ns"
  KUBE_CMD_OUTPUT=$(kubectl -n "${NAMESPACE}" get "${RESOURCE_NAME}" --ignore-not-found  -o=custom-columns=NAME:.metadata.name,KIND:.kind,CREATION:.metadata.creationTimestamp)
  if [ -n "${KUBE_CMD_OUTPUT:-}" ]; then
    kubectl -n "${NAMESPACE}" get "${RESOURCE_NAME}" --ignore-not-found  -o=custom-columns=NAME:.metadata.name,KIND:.kind,CREATION:.metadata.creationTimestamp
  else
    generate_logs "\\033[1m[ERROR]\\033[0m None ${RESOURCE_NAME} resources found"
    exit 1
  fi
}

# For an specific ns, execute all resources retrieval in parallel
function execute_kube_cmd(){
  for KUBE_CMD in "${CMD_LIST[@]}"
  do
    CMD_OUTPUT=$($KUBE_CMD)
    if [ -n "${CMD_OUTPUT:-}" ]; then
      echo ; $KUBE_CMD &
    fi
  done
}

# Get all resources in an specific namespace by using parallel
function monitor_ns_resources_with_parallel(){
  generate_logs "\\033[1m[INFO]\\033[0m Going to monitor all resources in ${NAMESPACE} ns"
  kubectl api-resources -o wide --verbs=get --namespaced=true --no-headers | awk '{print $1}' | while read -r RESOURCE_NAME; do
    if [[ ${DESIRED_RESOURCES} =~ .*${RESOURCE_NAME}.* ]]
    then
      parallel "kubectl -n {1} get {2} --ignore-not-found -o=custom-columns=NAME:.metadata.name,KIND:.kind,CREATION:.metadata.creationTimestamp" ::: "${NAMESPACE}" ::: "${RESOURCE_NAME}"
    fi
  done
}

# Get all resources in an specific namespace
function monitor_ns_resources(){
  generate_logs "\\033[1m[INFO]\\033[0m Going to monitor all resources in ${NAMESPACE} ns"
  while read -r RESOURCE_NAME API_GROUP; do
    if kubectl api-resources --namespaced=true --api-group="${API_GROUP}" | grep "${RESOURCE_NAME}" > /dev/null; then
      KUBE_CMD="kubectl -n ${NAMESPACE} get ${RESOURCE_NAME} --ignore-not-found -o=custom-columns=NAME:.metadata.name,KIND:.kind,CREATION:.metadata.creationTimestamp"
      CMD_LIST[$i]=$KUBE_CMD
      i=$((i+1))
    fi
  done <<EOL
  configmaps 
  persistentvolumeclaims
  pods
  secrets
  services
  deployments apps
  statefulsets apps
  jobs batch
  boshdeployments fissile.cloudfoundry.org
  extendedjobs fissile.cloudfoundry.org
  extendedsecrets fissile.cloudfoundry.org
  extendedstatefulsets fissile.cloudfoundry.org
EOL
execute_kube_cmd
wait
}

function select_resource(){
  # Check if namespace exists, before calling the main functions
  if ! kubectl get namespaces -o=custom-columns=NAME:.metadata.name --no-headers | grep "^${NAMESPACE}" >/dev/null ; then
    generate_logs "\\033[1m[ERROR]\\033[0m ${NAMESPACE} namespace does not exist."
    exit 1
  fi
  case "${DESIREDRESOURCE}" in
       boshdeployments)
            monitor_ns_resource "${DESIREDRESOURCE}"
            ;;
       extendedjobs)
            monitor_ns_resource "${DESIREDRESOURCE}"
            ;;
       extendedsecrets)
            monitor_ns_resource "${DESIREDRESOURCE}"
            ;;
       extendedstatefulsets)
            monitor_ns_resource "${DESIREDRESOURCE}"
            ;;
       *)
            if ! hash parallel 2>/dev/null; then
              generate_logs "\\033[1m[WARNING]\\033[0m \\033[1mGNU parallel\\033[0m binary is not installed."
              generate_logs "\\033[1m[WARNING]\\033[0m Please install it for a faster script performance."
              generate_logs "\\033[1m[WARNING]\\033[0m Going to run in slow mode."
              monitor_ns_resources "${DESIREDRESOURCE}"
            else
              generate_logs "\\033[1m[WARNING]\\033[0m GNU parallel binary found."
              generate_logs "\\033[1m[WARNING]\\033[0m Please run \\033[1m\"parallel --citation\"\\033[0m once, to silence citation notice for all future runs."
              monitor_ns_resources_with_parallel "${DESIREDRESOURCE}"
            fi
            ;;
  esac
}

function parse_cmd() {
  while [ $# -gt 0 ]; do
    OPTION=$1
    shift
    case ${OPTION} in
      -h | --help)
        usage
        exit 0
        ;;
      -n | --namespace)
        NAMESPACE=$1
        shift
        ;;
      -bdpl | --boshdeployments)
        DESIREDRESOURCE="boshdeployments"
        ;;
      -ejob | --extendedjobs)
        DESIREDRESOURCE="extendedjobs"
        ;;
      -esec | --extendedsecrets)
        DESIREDRESOURCE="extendedsecrets"
        ;;
      -ests | --extendedstatefulsets)
        DESIREDRESOURCE="extendedstatefulsets"
        ;;
      -v | --verbose)
        VERBOSE=1
        ;;
      *)
        echo "[Error] Invalid argument ${OPTION}."
        usage
        exit 1
        ;;
    esac
  done
}

parse_cmd "$@"

if [ -z "${DESIREDRESOURCE:-}" ]; then
  DESIREDRESOURCE="all"
fi

if [ -z "${VERBOSE:-}" ]; then
  VERBOSE=0
fi

if [ -z "${NAMESPACE:-}" ]; then
  if [ -n "${CF_OPERATOR_NAMESPACE:-}" ]; then
    NAMESPACE=${CF_OPERATOR_NAMESPACE:-}
  else
    echo "[Error] CF_OPERATOR_NAMESPACE env var is not set. Please set it or specify it via --namespace to continue."
    usage
    exit 1
  fi
fi

select_resource
