name: quarks-operator-ci

on:
  # run for every push (master, feature branch, ...)
  push:
  # nightly
  schedule:
    - cron:  '0 0 * * *'

env:
  GOPROXY: "https://proxy.golang.org"
  DOCKER_IMAGE_ORG: ghcr.io/cfcontainerizationbot
  DOCKER_IMAGE_REPOSITORY: quarks-operator-dev
  DOCKER_IMAGE_TAG: "${{ github.sha }}"
  DOCKER_RELEASE_ORG: ghcr.io/cloudfoundry-incubator
  DOCKER_RELEASE_REPOSITORY: quarks-operator

jobs:
  unit-tests:
    runs-on: ubuntu-latest

    # Cannot run for pushes in forked repos, without adapting this workflow
    if: github.repository == 'cloudfoundry-incubator/quarks-operator'

    steps:
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.15.1
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Install dependencies
      run: |
        sudo gem install bosh-template
        go install github.com/onsi/ginkgo/ginkgo
        go get -u golang.org/x/lint/golint
        curl -LO https://github.com/dominikh/go-tools/releases/download/2020.1.3/staticcheck_linux_amd64.tar.gz
        sudo tar xfz staticcheck_linux_amd64.tar.gz --strip-component 1 -C $GOPATH/bin staticcheck/staticcheck
    - name: Install shared tools
      run: |
        bin/tools
    - name: Run lint
      run: |
        go list ./... | xargs go vet
    - name: Run unit tests
      run: |
        bin/test-unit

  dockerbuild:
    needs: [unit-tests]
    runs-on: ubuntu-16.04

    steps:
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.15.1
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Install shared tools
      run: |
        bin/tools
        git config user.email "no-reply@quarks.cloudfoundry.org"
        git config user.name "$GITHUB_ACTOR"
    - name: Prepare docker build
      run: |
        go mod vendor
    - uses: whoan/docker-build-with-cache-action@v5
      with:
        username: cfcontainerizationbot
        # container registry personal access token
        password: "${{ secrets.CR_PAT }}"
        registry: "${{ env.DOCKER_IMAGE_ORG }}"
        image_name: "${{ env.DOCKER_IMAGE_REPOSITORY }}"
        image_tag: "${{ env.DOCKER_IMAGE_TAG }}"

  e2e-tests:
    needs: [dockerbuild]
    runs-on: ubuntu-16.04
    strategy:
      matrix:
        kubernetes_version: [v1.14.10,v1.16.4,v1.18.0]

    steps:
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.15.1
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Install Go dependencies
      run: |
        sudo gem install bosh-template
        go install github.com/onsi/ginkgo/ginkgo
    - name: Install shared tools
      run: |
        bin/tools
        git config user.email "no-reply@quarks.cloudfoundry.org"
        git config user.name "$GITHUB_ACTOR"
    - name: Create k8s Kind Cluster
      uses: engineerd/setup-kind@v0.4.0
      with:
       config: .github/kind-config.yaml
       version: v0.7.0
       image: kindest/node:${{matrix.kubernetes_version}}

    - name: Run cluster tests
      run: |
        bin/build-helm
        bin/test-cli-e2e
        bin/test-helm-e2e
        bin/test-helm-e2e-storage
        bin/test-helm-e2e-upgrade
      env:
        NODES: "3"
        OPERATOR_TEST_STORAGE_CLASS: "standard"
        PROJECT: "quarks-operator"
        CF_OPERATOR_WEBHOOK_SERVICE_HOST: 172.17.0.1
    - uses: actions/upload-artifact@v2
      if: success()
      with:
        name: helm chart
        path: "helm/quarks-*.tgz"

  integration-tests:
    needs: [dockerbuild]
    runs-on: ubuntu-16.04
    strategy:
      matrix:
        kubernetes_version: [v1.14.10,v1.16.4,v1.18.0]

    steps:
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.15.1
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Install Go dependencies
      run: |
        sudo gem install bosh-template
        go install github.com/onsi/ginkgo/ginkgo
    - name: Install shared tools
      run: |
        bin/tools
        git config user.email "no-reply@quarks.cloudfoundry.org"
        git config user.name "$GITHUB_ACTOR"
    - name: Create k8s Kind Cluster
      uses: engineerd/setup-kind@v0.3.0
      with:
       config: .github/kind-config.yaml
       version: v0.7.0
       image: kindest/node:${{matrix.kubernetes_version}}

    - name: Run cluster tests
      run: |
        bin/test-integration
        INTEGRATION_SUITE=storage bin/test-integration
        INTEGRATION_SUITE=util bin/test-integration
      env:
        NODES: "3"
        DEBUG: "no"
        OPERATOR_TEST_STORAGE_CLASS: "standard"
        PROJECT: "quarks-operator"
        CF_OPERATOR_WEBHOOK_SERVICE_HOST: 172.17.0.1
    - uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: ginkgo debug logs
        path: "**/ginkgo-node-*.log"

  publish:
    needs: [integration-tests,e2e-tests]
    runs-on: ubuntu-latest

    # only run if this is a push with a release tag
    if: startsWith( github.ref, 'refs/tags/v')

    steps:
    - uses: actions/checkout@v2

    - name: Install shared tools
      run: |
        bin/tools

    - name: Setup git
      run: |
        git config --global user.name "CFContainerizationBot"
        git config --global user.email "cf-containerization@cloudfoundry.org"

    - name: Get version number
      shell: bash
      run: |
        . ./bin/include/versioning
        echo "##[set-output name=artifact_version;]$(echo $ARTIFACT_VERSION)"
      id: get_version

    - name: Get current tag
      id: get_tag
      run: echo ::set-output name=TAG::${GITHUB_REF/refs\/tags\//}

    - name: Drafts release notes
      uses: release-drafter/release-drafter@v5
      with:
        name: "${{ steps.get_tag.outputs.TAG }} ðŸŒˆ"
        tag: ${{ steps.get_version.outputs.artifact_version }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      id: create_release

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: cfcontainerizationbot
        password: ${{ secrets.CR_PAT }}

    - name: Promote docker image
      shell: bash
      run: |
        pre="$DOCKER_IMAGE_ORG/$DOCKER_IMAGE_REPOSITORY:$DOCKER_IMAGE_TAG"
        image="$DOCKER_RELEASE_ORG/$DOCKER_RELEASE_REPOSITORY:$ARTIFACT_VERSION"
        docker pull "$pre"
        docker tag "$pre" "$image"
        docker push "$image"
      env:
        ARTIFACT_VERSION: "${{ steps.get_version.outputs.artifact_version }}"

    - name: Build binary to attach later
      shell: bash
      run: |
        bin/build
        zip --junk-paths quarks-operator-linux-amd64.zip binaries/quarks-operator
      env:
        ARTIFACT_VERSION: "${{ steps.get_version.outputs.artifact_version }}"

    - name: Checkout helm chart repo
      uses: actions/checkout@master
      with:
        repository: cloudfoundry-incubator/quarks-helm
        ref: refs/heads/master
        path: helm-charts
        # github personal access token, for pushing commits
        token: ${{ secrets.GH_PAT }}

    - name: Build and commit helm chart
      run: |
        bin/build-helm
        echo "##[set-output name=sha;]$( sha256sum helm/*.tgz | head -1 | cut -f1 -d ' ' )"

        helm repo index --merge helm-charts/index.yaml helm/
        cp -p helm/quarks*.tgz helm-charts/
        cp helm/index.yaml helm-charts/

        cd helm-charts
        git add .
        git commit -m "add helm chart for $ARTIFACT_VERSION"

        git push
      env:
        DOCKER_IMAGE_ORG: "${{ env.DOCKER_RELEASE_ORG }}"
        DOCKER_IMAGE_REPOSITORY: "${{ env.DOCKER_RELEASE_REPOSITORY }}"
        ARTIFACT_VERSION: "${{ steps.get_version.outputs.artifact_version }}"
      id: build_helm

    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install git-pull-request tool
      run: pip3 install git-pull-request

    - name: Checkout kubecf repo
      uses: actions/checkout@master
      with:
        repository: cloudfoundry-incubator/kubecf
        ref: refs/heads/master
        path: kubecf
        # github personal access token, for pushing commits
        token: ${{ secrets.GH_PAT }}

    - name: Create KubeCF PR
      shell: bash
      run: |
        version=$(echo "$version" | sed 's/+/%2B/')

        cd kubecf
        sed -i "/cf_operator:/{n;s/sha256: \(.*\)/sha256: ${sha}/}" ./dependencies.yaml
        sed -i "/cf_operator:/{n;n;n;s/version: \(.*\)/version: ${version}/}" ./dependencies.yaml
        git checkout -b bot/cf-operator

        git add .
        git commit -m "feat: bump cf-operator $version"

        git push -f origin bot/cf-operator

        # Create PR
        export GIT_ASKPASS=./git-password.sh
        cat > git-password.sh <<EOF
        #!/bin/sh
        echo "$token"
        EOF
        chmod +x git-password.sh
        git config --global core.editor "cat"
        git config --global credential.helper cache
        git config credential.https://github.com.username CFContainerizationBot
        git pull-request --no-fork --title "Update cf-operator dependency." --message "Increment cf-operator version in def.bzl file."
      env:
        sha: "${{ steps.build_helm.outputs.sha }}"
        version: "${{ steps.get_version.outputs.artifact_version }}"
        token: ${{ secrets.GH_PAT }}

    # You have to manually delete wrong assets from the release and wait for them to vanish
    - name: Upload release asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: "quarks-operator-linux-amd64.zip"
        asset_name: "quarks-operator-linux-amd64"
        asset_content_type: application/zip
